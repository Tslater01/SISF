# Stage 1: Build the environment using a builder image
FROM python:3.12-slim as builder

# Install poetry
RUN pip install poetry

# Set up the virtual environment in a path that will be shared across stages
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1

WORKDIR /app

# Copy only the files needed to install dependencies
COPY pyproject.toml poetry.lock ./

# Install dependencies, excluding development ones and the root package itself
RUN poetry install --no-dev --no-root


# Stage 2: Create the final, lean production image
FROM python:3.12-slim

# Set the working directory
WORKDIR /app

# Copy the virtual environment from the builder stage
COPY --from=builder /app/.venv ./.venv
# Add the virtual environment's bin to the PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy the application source code
COPY ./sisf ./sisf

# Set a default command (this will be overridden in docker-compose.yml for each service)
CMD ["echo", "Base image for SISF services. Override this command."]